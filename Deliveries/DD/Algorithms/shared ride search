//shared ride search

void SEARCH_SHARED_RIDE(Position startingPoint, Position destinationPoint){
		Ride selectedRide = RIDE_MATCHING;
		if(ride == null){
			create a new shared ride with the specified starting and destination points;
		}
		else{
			add the customer to the selected ride;
		}
	}

Ride RIDE_MATCHING(Position startingPoint, Position destinationPoint){
		List<Position> path <- calculate the ideal path for the ride, knowing the starting and destination points as parameters;
		List<Position> currentPath = new List<Position>
		for(Ride r: all the active shared ride){
			currentPath = r.getPath();
			if(path is totally contained in currentPath && r.passengers.length()<4) return r;
			if(currentPath.contains(path.startingPoint) && path.contains(currentPath.destinationPoint) && r.passengers.length()<4) return r;
		}
		return null;
	}