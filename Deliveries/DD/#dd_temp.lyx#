#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{hyperref}
\usepackage{listings}
\hypersetup{colorlinks, citecolor=black, filecolor=black, linkcolor=black, urlcolor=black}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{gobble}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
Politecnico di Milano 
\begin_inset Newline newline
\end_inset

Scuola di Ingegneria dellâ€™Informazione 
\begin_inset Newline newline
\end_inset

Corso di Laurea Magistrale in Computer Science and Engineering
\begin_inset Newline newline
\end_inset

 A.Y.
 2015-2016
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Title
\paragraph_spacing single
Software Engineering 2 Project
\series bold

\begin_inset Newline newline
\end_inset


\begin_inset Quotes eld
\end_inset

myTaxiService
\begin_inset Quotes erd
\end_inset


\begin_inset Newline newline
\end_inset

D
\series default
esign 
\series bold
D
\series default
ocument
\end_layout

\begin_layout Standard
\align left
\begin_inset VSpace 3cm
\end_inset

Principal Adviser: Prof.
 
\series bold
Di Nitto
\end_layout

\begin_layout Standard
\align right
Authors:
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Davide Fisicaro
\series default
 854043
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
Gianmarco Giummarra
\series default
 852667
\begin_inset Newline newline
\end_inset


\series bold
Salvatore Ferrigno
\series default
 850130
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
The Design Document is a document which will help the software development
 by providing a detailed functional description of the system to be developed.
 It will include narrative and graphical documentation of the design for
 the project, including Use Case models, Sequence diagrams and other supporting
 requirement information.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Itemize

\series bold
DBMS:
\series default
 database management system, a software that control the creation, maintenance,
 and use of a database.
 (e.g.
 MySQL).
\end_layout

\begin_layout Itemize

\series bold
EJB:
\series default
 Enterprise JavaBeans, a managed server-side component architecture for
 modular construction of enterprise applications.
\end_layout

\begin_layout Itemize

\series bold
Entity bean:
\series default
 a distributed object that have persistent state.
\end_layout

\begin_layout Itemize

\series bold
HTML:
\series default
 HyperText Markup Language, a markup language for building web pages.
\end_layout

\begin_layout Itemize

\series bold
HTTP:
\series default
 Hypertext Transfer Protocol, an application protocol used by web browsers.
\end_layout

\begin_layout Itemize

\series bold
JDBC:
\series default
 Java Database Connectivity, a Java API that allows the application to communica
te with a database.open source database manager system, a software capable
 of managing data.
\end_layout

\begin_layout Itemize

\series bold
JPA: 
\series default
Java Persistent API, a programming interface specification that describes
 the management of relational data.
\end_layout

\begin_layout Itemize

\series bold
MVC:
\series default
 Model-View-Control, a design pattern.
\end_layout

\begin_layout Itemize

\series bold
ORM: 
\series default
Object Relational Mapping, a technique of access do databases from object
 oriented languages.
\end_layout

\begin_layout Itemize

\series bold
SMTP: 
\series default
Simple Message Transfer Protocol, an internet standard for e-mail transmission.
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Itemize
RASD document.
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The myTaxiService system will be developed on the J2EE platform, for many
 reasons:
\end_layout

\begin_layout Itemize
to manage the big number of possible users;
\end_layout

\begin_layout Itemize
to help developers building it as a distributed system;
\end_layout

\begin_layout Itemize
to allow the developers to concentrate on business logic;
\end_layout

\begin_layout Itemize
to satisfy the portability requirement;
\end_layout

\begin_layout Standard
Furthermore it must be said that the system will be built in a multi-tier
 and multi-layer architecture that will be specified below.
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
From a high level point of view, the system will be designed according to
 the traditional multi-tier architecture used in enterprise applications.
 In more detail, the architecture will consist of four logical levels: the
 Client tier, the Web tier, the Business tier and the Data tier.
 The Client tier is allocated to the terminal the user logs in from, the
 Web tier and the Business tier stays on the Application Server, and the
 Data tier stays on the DBMS: this decision is made in order to guarantee
 properties such as scalability and fault tolerance.
 The Business tier are expected to interact with a mail server, using the
 SMTP protocol to send users messages, for example the confirmation code
 of the recording or the confirmation of a reservation.
\end_layout

\begin_layout Standard
Here follows a detailed description of each logical level:
\end_layout

\begin_layout Itemize

\series bold
Client tier: 
\series default
accessible via the web or mobile application.
 This tier interacts with the Web tier through an HTTP connection, requesting
 HTML pages and eventually sending data provided by the user.
 Furtermore the browser interprets the JavaScript code, in order to provide
 an improvement of performances of the service (e.g.
 validation forms or asynchronous requests to the server).
 
\end_layout

\begin_layout Itemize

\series bold
Web tier: 
\series default
this level receives from the Client tier HTTP requests and answers with
 HTML pages, generated basing on the data received, and eventually forwards
 requests to the Business tier.
 The Web tier will be implemented with JEE technology and will work with
 a compatible application server.
\end_layout

\begin_layout Itemize

\series bold
Business tier: 
\series default
this tier can directly communicate with the database and encapsulates the
 business logic.
 The model is based on a MVC pattern, and the persistent application data
 are represented by Entity Beans objects.
 The interaction with the database and the application logic are made with
 EJB components.
 To access the database this tier uses the JPA specification, which also
 features ORM, abstracting the relational model implemented by the database
 in a model of data objects, in order to allow the interaction with the
 application.
\end_layout

\begin_layout Itemize

\series bold
Data tier: 
\series default
it consists of a DBMS in order to guarantee data persistency.
 The Business tier communicates with the database using the standard technologie
s oj java (JDBC).
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Diagrams/architecture.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.1
\shape default
: High-level architecture
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
In order to better understand the tasks we will face while implementing
 functionalities we decided to adopt a top-down approach.
 This means that we are supposed to decompose our system into several sub-system
s.
 This will let us to separate, at least from a logical point of view, different
 set of functionalities.
 Later, once defined the sub-systems, we will be able to adopt a bottom-up
 approach in order to create more modular and reusable components.
 Here there are the sub-systems we decided to split our system in, with,
 expanded, the most relevant ones:
\end_layout

\begin_layout Subsubsection
Components
\end_layout

\begin_layout Standard

\series bold
Server sid
\series default
e
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Authentication manager}}: this is an important sub-system responsible
 for the security of the customer registration and login system.
 It handles activities such as creating a new customer account, log into
 the system or deleting an existing account;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Customer profile manager}}: this is the component responsible for
 the customer profile management;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Immediate call manager}}: this component is the one which manages
 the immediate taxi calls from the customer point of view;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Reservation call manager}}: this component is the one which manages
 the reservation calls from the customer point of view;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Taxi driver profile manager}}: this is the component responsible
 for the taxi driver profile management;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Incoming call manager}}: this component is the component the taxi
 drivers interact with in order to accept or decline the customer requests;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Assistance call manager}}: this component is the component the taxi
 drivers interact with in order to accept or decline the customer requests;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Data component}}: it is the component where the data is managed and
 viewed;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Payment manager}}: it is the component that manages the payment informati
on and calculates the fees for the rides;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Notification manager}}: it is the component that manages the notification
s to/from the users;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\series bold
Client side
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Guest component}}: this is the component where the guest user is
 implemented, with the allowed privileges; it interfaces with the limited
 views which allow the registration;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Customer component}}: it is one of the key component of the system
 and it's where the customer is implemented.
 From this component, through the proper interfaces that we will discuss
 below, the user gets access to the functionalities and the key features
 of the service;
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Taxi driver component}}: it is another key component of the system,
 it implements the taxi driver.
 It's the dual of the customer component;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Interfaces
\end_layout

\begin_layout Standard
In this subsection we define the interfaces the components will interact
 with, in order to follow the adopted top-down approach.
\end_layout

\begin_layout Standard

\series bold
Server side
\series default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Authentication manager}}:
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{authenticationManagement}}: this interface provides the methods that
 will allow the non-logged users to login to the system; it manages situation
 like guiding the recognized user to the relevant home page or sending email
 confirmation in case of registration of a new user; it will guide the recognize
d user to the relevant home page;
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{registrationManager}}: this interface provides the methods which
 contribute to the registration of a new user and the consequent email verificat
ion request;
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

	
\backslash
item{
\backslash
textit{Customer profile manager}}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{customerProfileManagement}}: this interface provides methods such
 as {
\backslash
textit{updateProfileInfo()}} and {
\backslash
textit{updatePaymentInfo()}};
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

	
\backslash
item{
\backslash
textit{Immediate call manager}}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{makeImmediateCall}}: this interface allows the customers to interact
 with the system in order to make requests for immediate taxi calls;
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

	
\backslash
item{
\backslash
textit{Reservation call manager}}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{makeReservation}}: this interface allows the customers to interact
 with the system in order to make requests for reservations;
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Taxi driver profile manager}}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{taxiDriverProfileManagement}}: this interface provides methods such
 as {
\backslash
textit{updateProfileInfo()}} and {
\backslash
textit{seePersonalUserRating()}};
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{Incoming call manager}}
\end_layout

\begin_layout Plain Layout

				
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

					
\backslash
item {
\backslash
textit{incomingCallManagement}}: this interface provides methods such as
 {
\backslash
textit{acceptCall()}} and {
\backslash
textit{declineCall()}};
\end_layout

\begin_layout Plain Layout

				
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

		
\backslash
item {
\backslash
textit{Taxi driver assistance call component}}
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{assistanceCallManagement}}: this interface provides methods such
 as {
\backslash
textit{accidentAssistanceCall()}},  {
\backslash
textit{systemFailureAssistanceCall()}} or {
\backslash
textit{genericAssistanceCall()}};
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Data manager}}:
\end_layout

\begin_layout Plain Layout

		
\backslash
begin{enumerate}
\end_layout

\begin_layout Plain Layout

			
\backslash
item {
\backslash
textit{dataHandler}}: this interface provides the data management methods
 in order to store and retrieve data to and from the server;
\end_layout

\begin_layout Plain Layout

		
\backslash
end{enumerate}
\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Client side
\series default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{itemize}
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Guest component}}: the guest component communicates with the authenticati
on and user management component through the {
\backslash
textit{registrationManager}} and {
\backslash
textit{authenticationManagement}} interfaces, explained above.
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Customer component}}: the customer component communicates with the
 corresponding server side components through the {
\backslash
textit{customerProfileManagement}}, {
\backslash
textit{makeImmediateCall}} and {
\backslash
textit{makeReservation}} interfaces, explained above.
\end_layout

\begin_layout Plain Layout

	
\backslash
item {
\backslash
textit{Taxi driver component}}: the taxi driver component communicates with
 the corresponding server side components through the {
\backslash
textit{taxiDriverProfileManagement}}, {
\backslash
textit{incomingCallManagement}} and {
\backslash
textit{assistanceCallManagement}} interfaces, explained above.
\end_layout

\begin_layout Plain Layout


\backslash
end{itemize}
\end_layout

\end_inset

Here is the diagram showing the interaction between the two sides of the
 component view, including the interfaces.
\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Diagrams/Sub-system diagram.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.2:
\shape default
 Component view of the system, with interfaces.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename Diagrams/Deployment.png
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.3
\shape default
: Deployment view diagram
\end_layout

\begin_layout Standard
In this section in shown how the software components are distributed with
 respect to the hardware resources available in the system.
 This diagram reports the main types of clients: 
\end_layout

\begin_layout Itemize
Web customer: this is the customer that access the service using a web browser.
 It communicates with the Web server that receives its requests and provides
 HTML pages in order to start the user experience, because it doesnâ€™t have
 an integrated interface.
 Through the Web server they can interact with the Business server;
\end_layout

\begin_layout Itemize
Taxi driver: this client interacts directly with the Business server, bypassing
 the Web server.
 This decision has been made basing on the difference between a web application
 and a mobile application: in spite of the former, the latter has its interface
 included in the application;
\end_layout

\begin_layout Itemize
Mobile customer: the behaviour is the same of the taxi driver; differences
 between this and the previous client will be further explained in detail;
\end_layout

\begin_layout Standard
In every node representing the clients is contained a specific module, called
 local view, representing the accessible functionalities of the system.
 Every local view corresponds to a remote view on the Business server.
 The Business server contains the application logic and the modules that
 handle the main functionalities of the system.
 Every module is accessible only by the allowed users, due to the different
 views that they have.
 All the data needed for the operations handled by the modules are retrieved
 from the database in the Data server.
 The various interactions with the database are monitored by the DBMS in
 order to guarantee the ACID properties of the database.
 Finally there is a system administrator, that can access to every server
 and most of the modules provided, basing on its particular view: we decided
 to deny a full access to every administrator in order to preserve the clientsâ€™
 privacy and deny access to sensible data.
 
\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Standard
In this section are explained through Sequence diagrams some of the most
 relevant interactions between components and actors of the system.
 Like in the RASD document, some assumptions are made in order to simplify
 the representation and clarify some aspects; by the way, some of the most
 important features, if considered implicit in a Sequence diagram, are explicitl
y represented in another one.
\end_layout

\begin_layout Subsubsection
Registration Sequence diagram
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Updated Sequence Diagrams/Reg_seq_diagram.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.4
\shape default
: Registration Sequence diagram
\end_layout

\begin_layout Subsubsection
Private immediate call Sequence diagram
\end_layout

\begin_layout Standard
From a detailed structural analysis of the system, we updated the previous
 sequence diagram shown in the RASD.
 
\end_layout

\begin_layout Standard
The changes are the following:
\end_layout

\begin_layout Itemize
added the Data, Notification Manager, Payment Manager systems;
\end_layout

\begin_layout Itemize
added the data storage operation when a ride is assigned;
\end_layout

\begin_layout Itemize
explicitly shown the interaction of different systems through the Notification
 Manager, when necessary;
\end_layout

\begin_layout Standard
For simplicity we assumed that, when the system is searching for an available
 taxi cab, there is at least one in the specific zone of the call.
\end_layout

\begin_layout Standard
Another assumption is that the Payment Manager, when verifies the validity
 of payment information, interacts implicitly with the Data system in order
 to retrieve the information to check.
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Updated Sequence Diagrams/ImmCall_seq_diagram.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.5
\shape default
: private immediate call Sequence diagram
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsubsection
Shared reservation Sequence diagram
\end_layout

\begin_layout Standard
For this sequence diagram, the changes with respect to the previous version,
 are basically the same of the sequence diagram for the Immediate call (2.5.2).
\end_layout

\begin_layout Standard
Furthermore, the payment information, after the check by the Payment Manager
 system, are assumed to be valid.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Updated Sequence Diagrams/ResCall_seq_diagram.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 2.6
\shape default
: shared reservation Sequence diagram
\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Standard
The architecture of the system has been previously described at higher level:
 the logical schema of tier provided reflects the hardware architecture.
 Every tier is hosted on a different machine, in particular: the Client
 tier is on the pc or smartphone the user access the system from, the Web
 tier is hosted on a separate server used only for this purpose, while another
 server hosts the Business tier.
 Finally a last server contains the Data tier.
 This division between all levels has been made in order to allow update
 and maintenance on a particular tier without affecting the others, and
 to prevent the whole system to interrupt in case of fault of a component.
\end_layout

\begin_layout Standard
The design pattern used for this system is the Model-View-Controller (MVC).
 This choice has been made mainly for the flexibility that this pattern
 provides: the model, the view and the controller are separated into different
 components that can be modified with a minimum impact with respect to the
 others, helping to achieve a better scalability and offering the possibility
 of future changes to the code or the adding of new functionalities to the
 system.
\end_layout

\begin_layout Standard
The Model contains the representation of data and the application logic,
 so all the functions that manipulates data.
\end_layout

\begin_layout Standard
The View makes the model suitable for the user interaction, providing a
 GUI: every user will access the system and all its functionalities through
 this component.
 Furthermore provides the possibility to have different representations
 (or views) for the same data, depending on the userâ€™s preference or on
 the userâ€™s permissions.
\end_layout

\begin_layout Standard
The Controller is responsible for the communication between the View and
 the Model: in particular responds to userâ€™s actions and invokes changes
 on the model.
\end_layout

\begin_layout Section
Algorithm design
\end_layout

\begin_layout Standard
This section contains some algorithms that describes some of the most relevant
 features of the system.
 All of these algorithms are written in a java-like pseudocode: their aim
 is to give an idea of how the code should be written, independently from
 the chosen programming language.
 
\end_layout

\begin_layout Standard
Here follows five algorithms implementing the most important functionalities:
 note that in many cases an algorithm is used by others also described here.
 Some basilar methods useful for the code understanding are also defined,
 while others are not defined and they refer to the interaction with gps
 and other system components.
 We donâ€™t know whether they exist or not, or exists with different names,
 but they are surely easily implementable using the appropriate APIs (for
 example for the gps).
\end_layout

\begin_layout Subsection
Taxi queue handler
\end_layout

\begin_layout Standard
This function handles the taxi queue for a certain zone, searching for new
 taxis and deleting the ones that have gone away.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

	This function handles the taxi queue
\end_layout

\begin_layout Plain Layout

	for a certain zone.It uses some other
\end_layout

\begin_layout Plain Layout

	methods defined below for the basic
\end_layout

\begin_layout Plain Layout

	operations such as refreshing, adding
\end_layout

\begin_layout Plain Layout

	and removing an item from the queue.
\end_layout

\begin_layout Plain Layout

	Some methods are not defined and they
\end_layout

\begin_layout Plain Layout

	refer to the interaction with gps.
 We
\end_layout

\begin_layout Plain Layout

	don't know weather they exists or
\end_layout

\begin_layout Plain Layout

	not, or exists with different names,
\end_layout

\begin_layout Plain Layout

	but they are surely easily implemented
\end_layout

\begin_layout Plain Layout

	using the gps' API.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

List<int> queue;
\end_layout

\begin_layout Plain Layout

void TAXI_QUEUE_HANDLER(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

queue = empty_set;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while service is active do{
\end_layout

\begin_layout Plain Layout

	List<signal> taxiSignals = searchSignals(currentZone);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for(i=0; i<taxiSignals.length; i++){
\end_layout

\begin_layout Plain Layout

		id = getTaxiDriverId(taxiSignals[i]);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		if(id doesn't belongs to queue){
\end_layout

\begin_layout Plain Layout

			queue = ADD_TO_QUEUE(id);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	queue = REFRESH_QUEUE(); 
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

the refreshing of the queue happen whenever a 
\end_layout

\begin_layout Plain Layout

taxi driver  changes his status, for whatever reason,
\end_layout

\begin_layout Plain Layout

such as when the unavailability status is set,
\end_layout

\begin_layout Plain Layout

or a request get declined.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

List<int> ADD_TO_QUEUE(int taxiDriverId){
\end_layout

\begin_layout Plain Layout

	queue.add(taxiDriverId); 
\end_layout

\begin_layout Plain Layout

	return queue;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

List<int> REMOVE_FROM_QUEUE(int taxiDriverId){
\end_layout

\begin_layout Plain Layout

	queue.remove(taxiDriverId);
\end_layout

\begin_layout Plain Layout

	return queue;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

List<int> GET_QUEUE(){
\end_layout

\begin_layout Plain Layout

	queue = REFRESH_QUEUE;
\end_layout

\begin_layout Plain Layout

	return queue;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Private ride search
\end_layout

\begin_layout Standard
The algorithm retrieves the zone of the starting point of the ride, then
 according to that queue forwards the request to the first taxi driver in
 the line, empting the queue with a FIFO policy.
 If the request is accepted the taxi is removed from the queue and takes
 in charge the call.
 Otherwise he is removed and re-added to the same queue, in order to shift
 him in the bottom position.
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard

\color black
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

The algorithm retrieves the zone of the starting point of
\end_layout

\begin_layout Plain Layout

the ride, then according to that queue forwards the reuest
\end_layout

\begin_layout Plain Layout

to the first taxi driver in the line, empting the queue
\end_layout

\begin_layout Plain Layout

with a FIFO policy.
 If the request is accepted the taxi
\end_layout

\begin_layout Plain Layout

is removed from the queue and takes in charge the call.
\end_layout

\begin_layout Plain Layout

Otherwise he is removed and readded to the same queue,
\end_layout

\begin_layout Plain Layout

in order to shift him in the bottom position.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Ride SEARCH_PRIVATE_RIDE(Call call){
\end_layout

\begin_layout Plain Layout

Zone startingZone=call.getQueueStartingZone();
\end_layout

\begin_layout Plain Layout

List<int> queue = startingZone.GET_QUEUE();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for(i=0, j=0; i<queue.length() && j<queue.length(); i++, j++){
\end_layout

\begin_layout Plain Layout

	forward request to taxi driver with id queue[i];
\end_layout

\begin_layout Plain Layout

	wait for taxi driver response; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if(taxi driver 	accepts the call){
\end_layout

\begin_layout Plain Layout

		ride<-create a new ride;
\end_layout

\begin_layout Plain Layout

		REMOVE_FROM_QUEUE(queue[i]);
\end_layout

\begin_layout Plain Layout

		return ride;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	else{
\end_layout

\begin_layout Plain Layout

		REMOVE_FROM_QUEUE(queue[i]);
\end_layout

\begin_layout Plain Layout

		ADD_TO_QUEUE(queue[i]);
\end_layout

\begin_layout Plain Layout

		KEEP_TRACK_OF_THE_REFUSING_DRIVER();
\end_layout

\begin_layout Plain Layout

		/* 
\end_layout

\begin_layout Plain Layout

		This operation in order to not forward
\end_layout

\begin_layout Plain Layout

		requests to the same taxi driver twice.
\end_layout

\begin_layout Plain Layout

		*/
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

return null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Private reservation call
\end_layout

\begin_layout Standard
The algorithm is used to accomplish a private reserved ride, so it checks
 that the hour is at least two hours later and then, 10 minutes before the
 selected time, searches for a taxi driver in the zone.
 If there is no available driver checks the nearby zones.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Ride PRIVATE_RESERVATION(ReservationCall call){
\end_layout

\begin_layout Plain Layout

Time reservationTime = call.getRideStartingTime();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(currentTime()-reservationTime < 2hours){
\end_layout

\begin_layout Plain Layout

	return null;
\end_layout

\begin_layout Plain Layout

	/*
\end_layout

\begin_layout Plain Layout

	a reservation must be at least for 2 hours after the call,
\end_layout

\begin_layout Plain Layout

	otherwise will be rejected
\end_layout

\begin_layout Plain Layout

	*/
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else{
\end_layout

\begin_layout Plain Layout

	wait until 10 minutes before reservationTime;
\end_layout

\begin_layout Plain Layout

	Ride ride = SEARCH_PRIVATE_RIDE(call);
\end_layout

\begin_layout Plain Layout

		while(ride == null && (reservationTime-currentTime()) < 5 minutes){
\end_layout

\begin_layout Plain Layout

			ride = search for a taxi driver in the adjacent zones;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		notify the customer for the current unavailability of taxi drivers;
\end_layout

\begin_layout Plain Layout

		ask the customer if he still wants to enjoy the service;
\end_layout

\begin_layout Plain Layout

		if(customerWants)
\end_layout

\begin_layout Plain Layout

			retry in 5 minutes;
\end_layout

\begin_layout Plain Layout

		else return null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

return ride;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Shared ride search
\end_layout

\begin_layout Standard
The algorithm is used to search for a shared ride, paying attention to the
 matching of the paths.
 If no shared ride can be matched with the needed path the system creates
 a new shared ride, and the customer will be the first passenger.
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5cm
\end_inset


\end_layout

\begin_layout Standard

\color black
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void SEARCH_SHARED_RIDE(Position startingPoint, Position destinationPoint){
\end_layout

\begin_layout Plain Layout

Ride selectedRide = RIDE_MATCHING;
\end_layout

\begin_layout Plain Layout

if(ride == null){
\end_layout

\begin_layout Plain Layout

	create a new ride with the specified starting and destination points;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else{
\end_layout

\begin_layout Plain Layout

	add the customer to the selected ride;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

Ride RIDE_MATCHING(Position startingPoint, Position destinationPoint){
\end_layout

\begin_layout Plain Layout

List<Position> path <- calculate the ideal path for the 
\end_layout

\begin_layout Plain Layout

		ride, knowing the starting and 
\end_layout

\begin_layout Plain Layout

		destination points as parameters;
\end_layout

\begin_layout Plain Layout

List<Position> currentPath = new List<Position> 
\end_layout

\begin_layout Plain Layout

for(Ride r: all the active shared ride){
\end_layout

\begin_layout Plain Layout

	currentPath = r.getPath();
\end_layout

\begin_layout Plain Layout

	if(path is totally contained in currentPath && r.passengers.length()<4)
\end_layout

\begin_layout Plain Layout

		return r;
\end_layout

\begin_layout Plain Layout

if(currentPath.contains(path.startingPoint) && 
\end_layout

\begin_layout Plain Layout

	path.contains(currentPath.destinationPoint) && 
\end_layout

\begin_layout Plain Layout

		r.passengers.length()<4)
\end_layout

\begin_layout Plain Layout

	return r;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

return null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Fee amount for shared rides
\end_layout

\begin_layout Standard
This algorithm is used to calculate the cost per passenger for every customer
 ending a shared ride, dividing the fee of the shared parts of the track
 with the other customers that are sharing the same track.
 At the end of the shared ride, the sum of all the costs of every customer
 that joined must be equal to the cost that results for the same total ride
 made by a single customer.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Ride{
\end_layout

\begin_layout Plain Layout

	List<Slot> ride_slots;
\end_layout

\begin_layout Plain Layout

	//other code
\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

This method calculates the fee related to his ride.
\end_layout

\begin_layout Plain Layout

In order to do this, a specific listener activates
\end_layout

\begin_layout Plain Layout

this method when it  	   observes that a customer
\end_layout

\begin_layout Plain Layout

ends his shared ride.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

	public float feeAmountCalc(Customer passenger){
\end_layout

\begin_layout Plain Layout

		float passenger_fee = 0;
\end_layout

\begin_layout Plain Layout

		foreach(Slot s: ride_slots){
\end_layout

\begin_layout Plain Layout

		if(passenger isIn s.passengerList){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

passenger_fee = passenger_fee +
\end_layout

\begin_layout Plain Layout

 (s.final_time - s.initial_time)*(fee_per_minute)/(s.passengerList.length);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return passenger_fee;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

This class represents a time slot; each ride is
\end_layout

\begin_layout Plain Layout

divided   in many slots.
   Every time that the
\end_layout

\begin_layout Plain Layout

number of passengers of the ride   changes (a
\end_layout

\begin_layout Plain Layout

passenger gets in or gets out of the cab),
\end_layout

\begin_layout Plain Layout

a new slot is created.
 Of course the initial
\end_layout

\begin_layout Plain Layout

time of the   first slot corresponds to the
\end_layout

\begin_layout Plain Layout

starting time of the ride,    and the final
\end_layout

\begin_layout Plain Layout

time of the slot n corresponds to the
\end_layout

\begin_layout Plain Layout

initial time of the slot n+1.
 The current time that
\end_layout

\begin_layout Plain Layout

fills the relative variables 
\end_layout

\begin_layout Plain Layout

in each time slot is taken from the system time.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

public class Slot{
\end_layout

\begin_layout Plain Layout

	private List<Customer> passengerList;
\end_layout

\begin_layout Plain Layout

	private time initial_time, final_time;
\end_layout

\begin_layout Plain Layout

	//other code
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
User interface design
\end_layout

\begin_layout Standard
The user interface design, already shown in the RASD, are presented in this
 document with the addition of the Web Browser UI.
\end_layout

\begin_layout Subsection
Customer UI
\end_layout

\begin_layout Standard
The following mockups represent the customer UI, regarding both the Web
 Browser and the Mobile Application interfaces.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Home.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.1
\shape default
: home user interface for the customer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Login.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.2
\shape default
: login user interface for the customer
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Registration.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
3: registration user interface for the customer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Map.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
4: map user interface for the customer
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/User Settings.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
5: setting user interface for the customer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Confirm Taxi.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
6: taxi confirmation user interface for the customer
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Reservation.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
7: taxi reservation user interface for the customer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Customer/Sharing.png
	scale 20

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
8: taxi sharing user interface for the customer
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Taxi driver UI
\end_layout

\begin_layout Standard
The following mockups represent the taxi driver UI.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Taxi Driver/logintabmockup.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
9: home and login user interface for the taxi driver
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Taxi Driver/requesttabmockup.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
10: incoming request user interface for the taxi driver
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Taxi Driver/ridingtabmockup.png
	scale 40

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
11: riding and assistance call user interface for the taxi driver
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename D:/Users/gianmarco/Dropbox/MAGISTRALE/SOFTWARE ENGINEERING 2/Project temp/DD/Mockups/Taxi Driver/Side Menu.png
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape italic
Figure 4.
\shape default
12: slide menu user interface for the taxi driver
\end_layout

\begin_layout Section
Requirements traceability
\end_layout

\begin_layout Standard
In the RASD document have been defined all the requirements (both functional
 and non-functional) of the system: in this section is explained how they
 maps into the design elements defined in this document.
\end_layout

\begin_layout Standard
Here follows the list of requirements, together with how they maps and which
 components interacts in order to allow their satisfiability:
\end_layout

\begin_layout Itemize
The system has to guarantee the registration to all the new major users
 who want to create a new account: there are no restrictions that could
 not allow the registration process, such as surveys or something similar;
\end_layout

\begin_layout Itemize
In order to complete the registration process, the system sends a confirmation
 link to the new user via email: in the section 2.5.1, figure 2.4, the sequence
 diagram shows that after the registration process, if successful, the system
 sends a confirmation email to the customer (operation 7).
 Used components: registrationManager, notificationHandlerPool;
\end_layout

\begin_layout Itemize
The system has to allow the login to an already registered customer when
 he types the correct email and password in the login form: in the RASD
 document, section 5.3, figure 5.6, the sequence diagram shows that the login
 is successful if and only if there is an existing account associated with
 the username and password provided (operation 6).
 Used components: authenticationManager;
\end_layout

\begin_layout Itemize
The system has to allow the login to a taxi driver when he types the correct
 identification code and password in the login form: see the requirement
 below, the process is the same;
\end_layout

\begin_layout Itemize
When a customer provides his payment information, the system verifies the
 validity of the submitted data and in case of success unlocks all the allowed
 functionalities: in every process that involves a payment, the system checks
 the validity of the payment method as a preliminary step, before doing
 any other operation (see section 2.5.2, figure 2.5, operation 2, and section
 2.5.3, figure 2.6, operation 2).
 Used components: paymentInterfacePool;
\end_layout

\begin_layout Itemize
The system notifies the confirm of the call with an email and has to assign
 the first taxi in the queue of the zone where the call comes from, if itâ€™s
 not empty: when a user makes a call providing the correct information needed,
 and after the acceptance by a taxi driver, the notification manager notifies
 the user with a mail containing the confirmation of the call (see section
 2.5.2, figure 2.5, operations 14-15, and section 2.5.3, figure 2.6, operations
 19-20).
 Used components: notificationHandlerPool, manageCall;
\end_layout

\begin_layout Itemize
When a taxi is assigned to a ride but rejects it, the system moves the selected
 taxi to the last position of the starting zoneâ€™s queue: in section 3.2 the
 algorithm removes the taxi from its queue when he rejects a call and then
 add him to the same queue, placing him in the last position;
\end_layout

\begin_layout Itemize
If the queue of the starting zone is empty, the system has to notify it
 to the calling customer and aborts the current operation: in sections 3.2,
 3.3 and 3.4, the algorithm returns a null ride in case of failure of the
 search.
 Used components: notificationHandlerPool;
\end_layout

\begin_layout Itemize
In a shared ride, the system asks the user the destination too: in the RASD
 document, section 5.2, figure 5.4, the class diagram shows that the class
 call contains the destination point of the ride.
 Furthermore, in this document, section 3.4, the algorithm used for the search
 of a shared ride requires the destination point as an input for the function;
\end_layout

\begin_layout Itemize
The system matches the route with the other shared calls (reservation or
 immediate calls), compatible both for the time and the path: in section
 3.4 the algorithm defines the search for a shared ride, and to achieve this
 compares the tracks in order to find a compatible ride with the time and
 the path;
\end_layout

\begin_layout Itemize
If there isnâ€™t any compatible shared ride to match with, the system normally
 assigns the first available taxi: in section 3.4 the algorithm defines the
 search for a shared ride, and if no shared ride is compatible, creates
 a new ride with the provided parameters;
\end_layout

\begin_layout Itemize
If there isnâ€™t any available taxi in the zone where the request comes from,
 the system has to notify it to the calling customer and aborts the current
 operation: in every sequence diagram, section 2.5, the system notifies the
 user of the unavailability of taxi drivers;
\end_layout

\begin_layout Itemize
In a reservation call, the system notifies the confirm of the reservation
 with an email and allocates a taxi to the request 10 minutes before the
 meeting time with the user, notifying the first available taxi of the queue
 of the starting addressâ€™ zone: in section 3.3, the described algorithm waits
 from the time the call has been made until 10 minutes before the desired
 reservation time, and then uses the search algorithm for a standard ride
 in order to find a taxi driver for the user.
 Used components: makeReservation, notificationHandlerPool;
\end_layout

\begin_layout Itemize
If the queue of the zone corresponding to the starting position is empty,
 the system has to forward the request to the first available taxi of the
 closest zone: in section 3.3, the algorithm, if itâ€™s not able to find a
 taxi in the starting zone of the ride, searches for an available taxi driver
 in the nearby zones.
\end_layout

\begin_layout Section
Persistent data management
\end_layout

\begin_layout Section
Used tools
\end_layout

\begin_layout Itemize
LYX to generate the pdf document;
\end_layout

\begin_layout Itemize
draw.io to generate the Sequence and the Use Case diagrams;
\end_layout

\begin_layout Itemize
Balsamiq Mockups 3 to generate the mockups of the mobile app and the web
 page.
\end_layout

\end_body
\end_document
